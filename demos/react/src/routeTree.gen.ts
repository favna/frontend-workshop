/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StateImport } from './routes/state'
import { Route as RefImport } from './routes/ref'
import { Route as PropsImport } from './routes/props'
import { Route as ListsImport } from './routes/lists'
import { Route as EffectImport } from './routes/effect'
import { Route as DrinkingImport } from './routes/drinking'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StateRoute = StateImport.update({
  path: '/state',
  getParentRoute: () => rootRoute,
} as any)

const RefRoute = RefImport.update({
  path: '/ref',
  getParentRoute: () => rootRoute,
} as any)

const PropsRoute = PropsImport.update({
  path: '/props',
  getParentRoute: () => rootRoute,
} as any)

const ListsRoute = ListsImport.update({
  path: '/lists',
  getParentRoute: () => rootRoute,
} as any)

const EffectRoute = EffectImport.update({
  path: '/effect',
  getParentRoute: () => rootRoute,
} as any)

const DrinkingRoute = DrinkingImport.update({
  path: '/drinking',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/drinking': {
      id: '/drinking'
      path: '/drinking'
      fullPath: '/drinking'
      preLoaderRoute: typeof DrinkingImport
      parentRoute: typeof rootRoute
    }
    '/effect': {
      id: '/effect'
      path: '/effect'
      fullPath: '/effect'
      preLoaderRoute: typeof EffectImport
      parentRoute: typeof rootRoute
    }
    '/lists': {
      id: '/lists'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof ListsImport
      parentRoute: typeof rootRoute
    }
    '/props': {
      id: '/props'
      path: '/props'
      fullPath: '/props'
      preLoaderRoute: typeof PropsImport
      parentRoute: typeof rootRoute
    }
    '/ref': {
      id: '/ref'
      path: '/ref'
      fullPath: '/ref'
      preLoaderRoute: typeof RefImport
      parentRoute: typeof rootRoute
    }
    '/state': {
      id: '/state'
      path: '/state'
      fullPath: '/state'
      preLoaderRoute: typeof StateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/drinking': typeof DrinkingRoute
  '/effect': typeof EffectRoute
  '/lists': typeof ListsRoute
  '/props': typeof PropsRoute
  '/ref': typeof RefRoute
  '/state': typeof StateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/drinking': typeof DrinkingRoute
  '/effect': typeof EffectRoute
  '/lists': typeof ListsRoute
  '/props': typeof PropsRoute
  '/ref': typeof RefRoute
  '/state': typeof StateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/drinking': typeof DrinkingRoute
  '/effect': typeof EffectRoute
  '/lists': typeof ListsRoute
  '/props': typeof PropsRoute
  '/ref': typeof RefRoute
  '/state': typeof StateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/drinking'
    | '/effect'
    | '/lists'
    | '/props'
    | '/ref'
    | '/state'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/drinking' | '/effect' | '/lists' | '/props' | '/ref' | '/state'
  id:
    | '__root__'
    | '/'
    | '/drinking'
    | '/effect'
    | '/lists'
    | '/props'
    | '/ref'
    | '/state'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DrinkingRoute: typeof DrinkingRoute
  EffectRoute: typeof EffectRoute
  ListsRoute: typeof ListsRoute
  PropsRoute: typeof PropsRoute
  RefRoute: typeof RefRoute
  StateRoute: typeof StateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DrinkingRoute: DrinkingRoute,
  EffectRoute: EffectRoute,
  ListsRoute: ListsRoute,
  PropsRoute: PropsRoute,
  RefRoute: RefRoute,
  StateRoute: StateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/drinking",
        "/effect",
        "/lists",
        "/props",
        "/ref",
        "/state"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/drinking": {
      "filePath": "drinking.jsx"
    },
    "/effect": {
      "filePath": "effect.jsx"
    },
    "/lists": {
      "filePath": "lists.jsx"
    },
    "/props": {
      "filePath": "props.jsx"
    },
    "/ref": {
      "filePath": "ref.jsx"
    },
    "/state": {
      "filePath": "state.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
